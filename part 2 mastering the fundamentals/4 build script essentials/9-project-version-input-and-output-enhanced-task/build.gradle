apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    // version = readVersion()
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'
    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task printVersion {
    logger.quiet "Version: $project.version"
}

// enhanced task - the actual task that provides the values for the properties exposed
// [START] configuration task format
// will deal with the configuration part, but not execute the ReleaseVersionTask to update value
task makeReleaseVersion(type: ReleaseVersionTask) {
    release = true
    destFile = versionFile // destFile = file('project-version.properties')
}

task rollbackReleaseVersion(type: ReleaseVersionTask) {
    release = false
    destFile = versionFile
}
// [END]

// [START] execution task format
tasks.register('makeReleaseVersion2', ReleaseVersionTask) {
    release = true
    destFile = versionFile
}

tasks.register('rollbackReleaseVersion2', ReleaseVersionTask) {
    release = false
    destFile = versionFile
}
// [END]

// task type - encapsulates the behavior of your logic
class ReleaseVersionTask extends DefaultTask {
    // @Optional // if able to be null
    @Input Boolean release // @Input validate not null
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning' // define metadata
        description = 'Makes project a release version.' // define metadata
    }

    @TaskAction
    void start() {
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: release)
        }
    }
}

// POGO
class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

wrapper {
    gradleVersion = '7.0'
}
